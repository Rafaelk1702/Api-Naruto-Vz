{"version":3,"sources":["chars.js","Search.js","App.js","reportWebVitals.js","index.js"],"names":["Chars","props","handleImageError","setState","imageSrcExist","state","this","imageStatus","error","Card","style","width","Img","variant","src","picture","alt","height","Body","Title","title","Text","description","Button","Component","search","CharacterFind","e","target","value","Character","nombre","Form","Row","Group","as","Col","top","margin","Control","placeholder","onChange","App","charAt","toUpperCase","substring","length","characterfind","idPage","num","active","index","text","idChar","over","characters","page","ch","key","id","href","thumbnail","i","items","CharacterTemp","itemsCharacters","find","map","includes","push","recordCount","num2","Pagination","Item","onClick","Container","fluid","backgroundColor","backgroundSize","className","md","splice","CardColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.289039de.chunk.js","sourcesContent":["import {Component} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class Chars extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { imageSrcExist: true  };\r\n      }\r\n    \r\n      handleImageLoaded() {\r\n        this.setState({ imageStatus: \"loaded\", error: false });\r\n      }\r\n    \r\n      handleImageError() {\r\n        this.setState({ imageStatus: \"failed to load\", error: true });\r\n      }\r\n      handleImageError = () => {\r\n        this.setState({imageSrcExist: false})\r\n        }\r\n    render(){\r\n        //let image_url= 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg';\r\n        //console.log(this.props)\r\n        return(\r\n            <div>\r\n                \r\n                    <Card style={{width:'16rem' }}> \r\n                        {/* <Card.Img variant='top' src={this.props.picture} alt='Hola' onerror = \"this.onerror = null; this.src = 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'; \" height='300px'/ > */}\r\n                        {/* funciona para error 403 <Card.Img variant='top' src={this.props.picture} onError={(e)=>{e.target.onerror = null; e.target.src=\"https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg\"}} height='300px'/ > */}\r\n                        {/* igual para error 403 <Card.Img variant='top' src={this.props.picture} ref={img => this.img = img} onError={() => this.img.src = 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'} height='300px'/ > */}\r\n                        {/* igual pero evitar bucle infinito <Card.Img variant='top' src={this.props.picture} onError={(e)=>{ if (e.target.src !== this.props.picture ){ e.target.onerror = null; e.target.src=\"https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg\"; } }}  height='300px'/ > */}\r\n                        {/* funciona para imagenes en null || <Card.Img variant='top' src={this.props.picture || 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'} height='300px'/ > */}\r\n                        <Card.Img variant='top' src={this.props.picture || 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'} alt='Imagen no disponible' height='250px'/ >\r\n                        \r\n                        \r\n                        <Card.Body>\r\n                            <Card.Title>{this.props.title}</Card.Title>\r\n                            <Card.Text>{this.props.description}</Card.Text>\r\n                            <Button variant=\"primary\">Go somewhere</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                \r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import {Component} from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport {Col} from 'react-bootstrap'\r\n\r\nexport default class search extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            nombre: this.props.title,\r\n            Character: '',\r\n        }\r\n    }\r\n    CharacterFind =(e)=>{\r\n        \r\n         let target = e.target.value;\r\n         this.setState({Character:target});\r\n         this.props.CharacterFind(target);\r\n         \r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <Form>\r\n                    <Form.Row>\r\n                    <Form.Group as={Col} style={{top:'50px', margin:'0 0 70px 0 '}} > {/*para que form.group pueda establever ancho del input debe tener el form.row antes */}\r\n                        <Form.Control style={{width:'300px' , margin:'0 auto'}} placeholder='Nombre...' onChange={(e)=> this.CharacterFind(e)}></Form.Control>\r\n                    </Form.Group>\r\n                    </Form.Row>\r\n                </Form>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","\nimport {Component} from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pagination from 'react-bootstrap/Pagination';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport * as characters from './data/characters.json';\nimport Chars from './chars';\nimport Search from './Search'\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      characters: characters.data,\n      characterfind: '',\n      page:1,\n      idChar : 1,\n      over:0\n    }\n  }\n  CharacterFind=(e)=>{\n    let string1 = e.charAt(0).toUpperCase(); //tomamos el primer caracter y lo convertirmos a mayuscula\n    let string2 = e.substring(1,e.length); // desde el segundo caracter\n    let value = string1 + string2; //unimos\n    \n\n\n    this.setState({characterfind: value});\n    \n    // console.log(string1);\n    // console.log(string2);\n    // console.log(value);\n    \n   \n\n  }\n  //fetch\n  componentDidMount(){\n    //fetch('https://naruto-api-prod.herokuapp.com/v1/characters')\n    //.then(response => response.json())\n   // .then(data => this.setState({characters: data.data}))\n  }\n\n  //\"id\":3413 brinca a id\":3417 entre muchos otros por lo que no hay 3983 characters\n  // si no 1252, por lo que hay que tener en cuenta mientras iteramos.\n    /*la sentencia del return tiene que estar al laodo paera que funcione */\n\n  recordCount(ch,key){\n\n    var record = (  <Chars\n          key={key} id={ch.id} title={ch.title} href={ch.href}\n          picture= {ch.thumbnail} description={ch.description.text}\n          />\n        )\n\n  return record;\n    }\n\n  idPage = (num,active,e) => {\n\n    for (let index = 0; index < num+1; index++){\n      if (e.target.text == index ){\n        // CharacterTemp = CharacterTemp[index];\n        active = index;\n        this.setState({idChar:index, characterfind:'', over: index });\n        //solo llamo a un state y modifico varios. no puedo llamar a varios state\n      //  console.log(this.state.characterfind)\n       }\n    }\n  }\n\n  render(){\n\n     var page = 0;\n     var num = 0;\n     var i = 0;\n     var items =[];\n     var CharacterTemp =[];\n     var active= 0;\n     var limit = 21;\n     var limit2 = 21;\n   \n     var itemsCharacters = [];\n     var find = [];\n     var over=0;\n     var over2= false;\n    //  console.log()\n\n\n\n     {this.state.characters.map((ch,key) =>{\n\n       if (ch.title.includes(this.state.characterfind)){\n       find.push(<Col key={key}>\n          {/* <br/> */}\n          \n            <Chars\n            key={key} id={ch.id} title={ch.title} href={ch.href}\n            picture= {ch.thumbnail} description={ch.description.text}\n            />\n          \n     {/* find2.push = [...find]; */}\n        </Col>)\n        // console.log(find)\n       }\n\n        CharacterTemp.push (this.recordCount(ch,key));\n         page++;\n         // this.state.characters.length-1 == key esto para que incluya los sobrantes.es decir no solo por lotes de 21, pues los 14 restantes no entrarian en la condicion page===limit, por lo q si this.state.characters.length-1 == key estaria diciendo si el arreglo llego a su fin, q me incuya esos restantes q no entraron en la condicion primera page===limit\n           if (page===limit || this.state.characters.length-1 == key){\n\n            i++;\n            itemsCharacters[i] = [...CharacterTemp] ;\n\n             page = 0;\n             num++;\n             over++\n\n              CharacterTemp = [];\n              // if (this.state.over === limit2-1){\n\n                \n                \n              // }\n\n                //  if (num+2 === this.state.idChar\n                //    || num-2 === this.state.idChar)\n\n                //   {\n                //   // items.push(<Pagination.Ellipsis />);\n                //   }\n\n                \n                // console.log(num)\n                //  if (over < limit2+1 ) {\n                //   console.log(limit2)\n                //   console.log(over)\n                //   if (this.state.over === limit2){\n                    \n                //     console.log('sdsd')\n                //       items =[];\n                //       over=  over + limit;\n                //       num = over;\n                //       limit2 = limit2 + limit;\n                \n                let num2= num;\n                //cambie a num2 porq el active no lo tomaba en la paginacion al hacer click al compararse active={num2 === this.state.idChar} ya que tiene 0 por delante\n                     if(num < 10){\n                       num= '0'+num;\n                     }\n                    \n                //   }\n                  //cada vez q el estado cambie, la condicion se activara de e atributo active, si num q es la key es igual, se mostrara en la vista ya que tengo directamente el estado para que se muestre\n                  items.push(\n                  <Pagination.Item  key={num2} active={num2 === this.state.idChar} onClick={(e)=> this.idPage(num,active,e)}>\n                  {num}\n                  </Pagination.Item>,\n                  );\n              // }\n          }\n\n  }\n  )  }\n\n\n\n//let Dirpicture = '/public/ass'\n    //console.log(this.state.characters)\n    return(\n      <div>\n\n        <Container fluid style={{ backgroundColor:'rgb(127, 114, 140)', backgroundSize:'100%'}}>\n          <Row className='bgdiv'>\n\n              <img className='bg' src='https://www.wallpapertip.com/wmimgs/28-285102_hyuga-hinata.jpg'></img>\n\n           </Row>\n\n          <Search className='sh' CharacterFind={this.CharacterFind}/>\n\n          <div className='center'>\n            <Row className=\"justify-content-md-center\">\n            <Col md='auto'>\n            <Pagination>\n              \n                <Row className=\"justify-content-md-center style-pagination\">\n                  {/* <Pagination.First />\n                  <Pagination.Prev/> */}\n                  {items.splice(0,20)}                \n                  {items.splice(0,20)}\n                  {items.splice(0,20)}\n                  {/* <Pagination.Next/>\n                  <Pagination.Last/>                 */}\n                </Row>         \n                \n            </Pagination>\n             </Col>\n             </Row>\n           </div>\n\n <Row className=\"justify-content-md-center\" > {/*centrar */}\n  {/* for */}<CardColumns>\n  \n   {/**la sentencia del return tiene que estar al laodo paera que funcione */}\n   {/* para colocar una al lado de otra usa row y col  */}\n\n        {/* <h2>{this.state.idChar}</h2> */}\n        \n        {this.state.characterfind.length > 0 ? find : itemsCharacters[this.state.idChar]}\n        \n\n\n  \n      </CardColumns>\n  </Row>    \n        </Container>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
[{"C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\index.js":"1","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\App.js":"2","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\reportWebVitals.js":"3","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\Search.js":"4","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\chars.js":"5","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\i18n\\config.js":"6"},{"size":542,"mtime":1693322365770,"results":"7","hashOfConfig":"8"},{"size":7043,"mtime":1693431673428,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1692979456467,"results":"10","hashOfConfig":"8"},{"size":1113,"mtime":1692979456394,"results":"11","hashOfConfig":"8"},{"size":3143,"mtime":1693431734274,"results":"12","hashOfConfig":"8"},{"size":506,"mtime":1693323923870,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ll924j",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\index.js",[],["29","30"],"C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\App.js",["31","32","33","34","35","36"],"\r\nimport {Component} from 'react'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport {Container,Row,Col} from 'react-bootstrap';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\n//import * as characters from './i18n/locales/es/characters.json';\r\nimport Chars from './chars';\r\nimport Search from './Search';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { Suspense } from 'react';\r\nimport i18n from './i18n/config';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      characters: i18n.store.data.es.translations.data,\r\n      characterfind: '',\r\n      page:1,\r\n      idChar : 1,\r\n      over:0,\r\n      button_char: 'Ver detalles',\r\n      href: 'https://naruto.fandom.com'\r\n    }\r\n  }\r\n  CharacterFind=(e)=>{\r\n    let string1 = e.charAt(0).toUpperCase(); //tomamos el primer caracter y lo convertirmos a mayuscula\r\n    let string2 = e.substring(1,e.length); // desde el segundo caracter\r\n    let value = string1 + string2; //unimos\r\n    this.setState({characterfind: value});   \r\n    // console.log(string1);\r\n    // console.log(string2);\r\n    // console.log(value);\r\n  }\r\n  Traductor(){\r\n    \r\n    //const {t, i18n} = useTranslation([\"Characters\"]);\r\n\r\n  }\r\n  //fetch\r\n  componentDidMount(){\r\n    //fetch('https://naruto-api-prod.herokuapp.com/v1/characters')\r\n    //.then(response => response.json())\r\n   // .then(data => this.setState({characters: data.data}))\r\n  }\r\n  //\"id\":3413 brinca a id\":3417 entre muchos otros por lo que no hay 3983 characters\r\n  // si no 1252, por lo que hay que tener en cuenta mientras iteramos.\r\n    /*la sentencia del return tiene que estar al laodo paera que funcione */\r\n  recordCount(ch,key){\r\n    var hrefp = this.state.href + ch.href;\r\n    //console.log(hrefp);\r\n    var record = (  <Chars\r\n          key={key} id={ch.id} title={ch.title} href={hrefp}\r\n          picture= {ch.thumbnail} description={ch.description.text}\r\n          button= {this.state.button_char}\r\n          />\r\n    )\r\n      return record;\r\n    }\r\n  idPage = (num,active,e) => {\r\n    for (let index = 0; index < num+1; index++){\r\n      if (e.target.text == index ){\r\n        // CharacterTemp = CharacterTemp[index];\r\n        active = index;\r\n        this.setState({idChar:index, characterfind:'', over: index });\r\n        //solo llamo a un state y modifico varios. no puedo llamar a varios state\r\n      //  console.log(this.state.characterfind)\r\n       }\r\n    }\r\n  }\r\n\r\n  render(){\r\n     var page = 0;\r\n     var num = 0;\r\n     var i = 0;\r\n     var over = 0;\r\n     var items =[];\r\n     var CharacterTemp =[];\r\n     var active= 0;\r\n     var limit = 21;\r\n     //var limit2 = 21;   \r\n     var itemsCharacters = [];\r\n     var find = [];\r\n     const changeLanguage = () =>{\r\n      //i18n.changeLanguage(\"en\")\r\n      this.setState ({ characters: i18n.store.data.en.translations.data, button_char: 'See details'});\r\n     }\r\n     //var over2= false;\r\n      //console.log(this.state);\r\n    \r\n{this.state.characters.map((ch,key) =>{\r\n        if (ch.title.includes(this.state.characterfind)){\r\n          var hrefp = this.state.href + ch.href; \r\n        find.push(<Col key={key}>\r\n            {/* <br/> */}  \r\n               \r\n              <Chars\r\n              key={key} id={ch.id} title={ch.title} href={hrefp}\r\n              picture= {ch.thumbnail} description={ch.description.text}\r\n              button= {this.state.button_char} href_ini= {this.state.href}\r\n              />        \r\n            {/* find2.push = [...find]; */}\r\n          </Col>)\r\n          // console.log(find)\r\n        }\r\n      CharacterTemp.push (this.recordCount(ch,key));\r\n      page++;\r\n          // this.state.characters.length-1 == key esto para que incluya los sobrantes.es decir no solo por lotes de 21, pues los 14 restantes no entrarian en la condicion page===limit, por lo q si this.state.characters.length-1 == key estaria diciendo si el arreglo llego a su fin, q me incuya esos restantes q no entraron en la condicion primera page===limit\r\n      if (page===limit || this.state.characters.length-1 == key){\r\n        i++;\r\n        itemsCharacters[i] = [...CharacterTemp] ;\r\n        page = 0;\r\n        num++;\r\n        over++;\r\n        CharacterTemp = [];          \r\n        let num2= num;\r\n        //cambie a num2 porq el active no lo tomaba en la paginacion al hacer click al compararse active={num2 === this.state.idChar} ya que tiene 0 por delante\r\n              if(num < 10){\r\n                num= '0'+num;\r\n              }       \r\n        //   }\r\n          //cada vez q el estado cambie, la condicion se activara de e atributo active, si num q es la key es igual, se mostrara en la vista ya que tengo directamente el estado para que se muestre\r\n          items.push(\r\n          <Pagination.Item  key={num2} active={num2 === this.state.idChar} onClick={(e)=> this.idPage(num,active,e)}>\r\n          {num}\r\n          </Pagination.Item>,\r\n          );\r\n                // }\r\n      }\r\n    }\r\n  )  \r\n}\r\n//let Dirpicture = '/public/ass'\r\n    //console.log(this.state.characters)\r\n\r\n    return(\r\n      <div>\r\n        <button className=\"idioma\" onClick={changeLanguage}>Cambiar al ingl√©s</button>\r\n          <Suspense fallback=\"Cargando traducciones\">\r\n          \r\n          {/* <Translation>\r\n            {\r\n              t => <h1>{t('Welcome to React')}</h1>\r\n            }\r\n\r\n          </Translation> */}\r\n            \r\n            \r\n          </Suspense>\r\n          <Container fluid style={{ backgroundColor:'rgb(127, 114, 140)', backgroundSize:'100%'}}>\r\n          <Row className='bgdiv'>\r\n              <img className='bg' src='https://www.wallpapertip.com/wmimgs/28-285102_hyuga-hinata.jpg'></img>\r\n          </Row>\r\n      <Search className='sh' CharacterFind={this.CharacterFind}/>\r\n      \r\n      \r\n      <div className='center'>\r\n            <Row className=\"justify-content-md-center\">\r\n            <Col md='auto'>\r\n            <Pagination>   \r\n                <Row className=\"justify-content-md-center style-pagination\">\r\n                  {/* <Pagination.First />\r\n                  <Pagination.Prev/> */}\r\n                  {items.splice(0,20)}                \r\n                  {items.splice(0,20)}\r\n                  {items.splice(0,20)}\r\n                  {/* <Pagination.Next/>\r\n                  <Pagination.Last/>*/}\r\n                </Row>           \r\n            </Pagination>\r\n            </Col>\r\n            </Row>\r\n      </div>\r\n        <Row className=\"justify-content-md-center\" > {/*centrar */}\r\n          {/* for */}\r\n          \r\n          <CardColumns>\r\n            {/**la sentencia del return tiene que estar al laodo paera que funcione */}\r\n            {/* para colocar una al lado de otra usa row y col  */}\r\n            {/* <h2>{this.state.idChar}</h2> */}\r\n            {this.state.characterfind.length > 0 ? find : itemsCharacters[this.state.idChar]}\r\n          </CardColumns>\r\n        </Row>    \r\n    </Container>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(App);\r\n","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\reportWebVitals.js",[],"C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\Search.js",[],"C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\chars.js",["37","38"],"import {Component} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { withTranslation } from 'react-i18next';\r\nimport i18n from './i18n/config';\r\n\r\nclass Chars extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { imageSrcExist: true  };\r\n      }\r\n    \r\n      handleImageLoaded() {\r\n        this.setState({ imageStatus: \"loaded\", error: false });\r\n      }\r\n    \r\n      handleImageError() {\r\n        this.setState({ imageStatus: \"failed to load\", error: true });\r\n      }\r\n      handleImageError = () => {\r\n        this.setState({imageSrcExist: false})\r\n        }\r\n    render(){\r\n        //let image_url= 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg';\r\n        //console.log(this)\r\n        const changeLanguage = () =>{\r\n          i18n.changeLanguage(\"en\")\r\n         }\r\n         \r\n        return(\r\n            <div>\r\n                \r\n                    <Card style={{width:'16rem' }}> \r\n                        {/* <Card.Img variant='top' src={this.props.picture} alt='Hola' onerror = \"this.onerror = null; this.src = 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'; \" height='300px'/ > */}\r\n                        {/* funciona para error 403 <Card.Img variant='top' src={this.props.picture} onError={(e)=>{e.target.onerror = null; e.target.src=\"https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg\"}} height='300px'/ > */}\r\n                        {/* igual para error 403 <Card.Img variant='top' src={this.props.picture} ref={img => this.img = img} onError={() => this.img.src = 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'} height='300px'/ > */}\r\n                        {/* igual pero evitar bucle infinito <Card.Img variant='top' src={this.props.picture} onError={(e)=>{ if (e.target.src !== this.props.picture ){ e.target.onerror = null; e.target.src=\"https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg\"; } }}  height='300px'/ > */}\r\n                        {/* funciona para imagenes en null || <Card.Img variant='top' src={this.props.picture || 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'} height='300px'/ > */}\r\n                        <Card.Img variant='top' src={this.props.picture || 'https://i.pinimg.com/564x/04/38/75/0438751d493c84b2ef88e8f28d6aa237.jpg'} alt='Imagen no disponible' height='250px'/>\r\n                        \r\n                        \r\n                        <Card.Body>\r\n                            <Card.Title>{this.props.title}</Card.Title>\r\n                            <Card.Text>{this.props.description}</Card.Text>\r\n                            <a href={this.props.href} target=\"_blank\" rel=\"charct\">\r\n                              <Button variant=\"primary\">{this.props.button}</Button>\r\n                            </a>\r\n                            \r\n                        </Card.Body>\r\n                    </Card>\r\n                \r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default withTranslation()(Chars);","C:\\Users\\silva\\Documents\\Api-Naruto-Vz\\src\\i18n\\config.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":64,"column":25,"nodeType":"45","messageId":"46","endLine":64,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":78,"column":10,"nodeType":"49","messageId":"50","endLine":78,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":93,"column":1,"nodeType":"53","messageId":"54","endLine":134,"endColumn":2},{"ruleId":"55","severity":1,"message":"56","line":93,"column":37,"nodeType":"57","messageId":"58","endLine":93,"endColumn":39},{"ruleId":"43","severity":1,"message":"44","line":111,"column":58,"nodeType":"45","messageId":"46","endLine":111,"endColumn":60},{"ruleId":"59","severity":1,"message":"60","line":154,"column":15,"nodeType":"61","endLine":154,"endColumn":104},{"ruleId":"47","severity":1,"message":"62","line":26,"column":15,"nodeType":"49","messageId":"50","endLine":26,"endColumn":29},{"ruleId":"63","severity":1,"message":"64","line":45,"column":29,"nodeType":"61","messageId":"65","endLine":45,"endColumn":84,"fix":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'over' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'changeLanguage' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"69","text":"70"},"no-global-assign","no-unsafe-negation",[2783,2791],"\"charct noreferrer\""]
[{"C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\index.js":"1","C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\reportWebVitals.js":"2","C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\App.js":"3","C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\chars.js":"4","C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\Search.js":"5"},{"size":500,"mtime":1609870231540,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609870231540,"results":"8","hashOfConfig":"7"},{"size":6709,"mtime":1615862789112,"results":"9","hashOfConfig":"7"},{"size":2783,"mtime":1615858347765,"results":"10","hashOfConfig":"7"},{"size":1113,"mtime":1613688227259,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1vxtsbc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\index.js",[],["24","25"],"C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\reportWebVitals.js",[],"C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\App.js",["26","27","28","29","30","31","32","33"],"\nimport {Component} from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pagination from 'react-bootstrap/Pagination';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport * as characters from './data/characters.json';\nimport Chars from './chars';\nimport Search from './Search'\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      characters: characters.data,\n      characterfind: '',\n      page:1,\n      idChar : 1,\n      over:0\n    }\n  }\n  CharacterFind=(e)=>{\n    let string1 = e.charAt(0).toUpperCase(); //tomamos el primer caracter y lo convertirmos a mayuscula\n    let string2 = e.substring(1,e.length); // desde el segundo caracter\n    let value = string1 + string2; //unimos\n    \n\n\n    this.setState({characterfind: value});\n    \n    // console.log(string1);\n    // console.log(string2);\n    // console.log(value);\n    \n   \n\n  }\n  //fetch\n  componentDidMount(){\n    //fetch('https://naruto-api-prod.herokuapp.com/v1/characters')\n    //.then(response => response.json())\n   // .then(data => this.setState({characters: data.data}))\n  }\n\n  //\"id\":3413 brinca a id\":3417 entre muchos otros por lo que no hay 3983 characters\n  // si no 1252, por lo que hay que tener en cuenta mientras iteramos.\n    /*la sentencia del return tiene que estar al laodo paera que funcione */\n\n  recordCount(ch,key){\n\n    var record = (  <Chars\n          key={key} id={ch.id} title={ch.title} href={ch.href}\n          picture= {ch.thumbnail} description={ch.description.text}\n          />\n        )\n\n  return record;\n    }\n\n  idPage = (num,active,e) => {\n\n    for (let index = 0; index < num+1; index++){\n      if (e.target.text == index ){\n        // CharacterTemp = CharacterTemp[index];\n        active = index;\n        this.setState({idChar:index, characterfind:'', over: index });\n        //solo llamo a un state y modifico varios. no puedo llamar a varios state\n      //  console.log(this.state.characterfind)\n       }\n    }\n  }\n\n  render(){\n\n     var page = 0;\n     var num = 0;\n     var i = 0;\n     var items =[];\n     var CharacterTemp =[];\n     var active= 0;\n     var limit = 21;\n     var limit2 = 21;\n   \n     var itemsCharacters = [];\n     var find = [];\n     var over=0;\n     var over2= false;\n    //  console.log()\n\n\n\n     {this.state.characters.map((ch,key) =>{\n\n       if (ch.title.includes(this.state.characterfind)){\n       find.push(<Col key={key}>\n          {/* <br/> */}\n          \n            <Chars\n            key={key} id={ch.id} title={ch.title} href={ch.href}\n            picture= {ch.thumbnail} description={ch.description.text}\n            />\n          \n     {/* find2.push = [...find]; */}\n        </Col>)\n        // console.log(find)\n       }\n\n        CharacterTemp.push (this.recordCount(ch,key));\n         page++;\n         // this.state.characters.length-1 == key esto para que incluya los sobrantes.es decir no solo por lotes de 21, pues los 14 restantes no entrarian en la condicion page===limit, por lo q si this.state.characters.length-1 == key estaria diciendo si el arreglo llego a su fin, q me incuya esos restantes q no entraron en la condicion primera page===limit\n           if (page===limit || this.state.characters.length-1 == key){\n\n            i++;\n            itemsCharacters[i] = [...CharacterTemp] ;\n\n             page = 0;\n             num++;\n             over++\n\n              CharacterTemp = [];\n              // if (this.state.over === limit2-1){\n\n                \n                \n              // }\n\n                //  if (num+2 === this.state.idChar\n                //    || num-2 === this.state.idChar)\n\n                //   {\n                //   // items.push(<Pagination.Ellipsis />);\n                //   }\n\n                \n                // console.log(num)\n                //  if (over < limit2+1 ) {\n                //   console.log(limit2)\n                //   console.log(over)\n                //   if (this.state.over === limit2){\n                    \n                //     console.log('sdsd')\n                //       items =[];\n                //       over=  over + limit;\n                //       num = over;\n                //       limit2 = limit2 + limit;\n                \n                let num2= num;\n                //cambie a num2 porq el active no lo tomaba en la paginacion al hacer click al compararse active={num2 === this.state.idChar} ya que tiene 0 por delante\n                     if(num < 10){\n                       num= '0'+num;\n                     }\n                    \n                //   }\n                  //cada vez q el estado cambie, la condicion se activara de e atributo active, si num q es la key es igual, se mostrara en la vista ya que tengo directamente el estado para que se muestre\n                  items.push(\n                  <Pagination.Item  key={num2} active={num2 === this.state.idChar} onClick={(e)=> this.idPage(num,active,e)}>\n                  {num}\n                  </Pagination.Item>,\n                  );\n              // }\n          }\n\n  }\n  )  }\n\n\n\n//let Dirpicture = '/public/ass'\n    //console.log(this.state.characters)\n    return(\n      <div>\n\n        <Container fluid style={{ backgroundColor:'rgb(127, 114, 140)', backgroundSize:'100%'}}>\n          <Row className='bgdiv'>\n\n              <img className='bg' src='https://www.wallpapertip.com/wmimgs/28-285102_hyuga-hinata.jpg'></img>\n\n           </Row>\n\n          <Search className='sh' CharacterFind={this.CharacterFind}/>\n\n          <div className='center'>\n            <Row className=\"justify-content-md-center\">\n            <Col md='auto'>\n            <Pagination>\n              \n                <Row className=\"justify-content-md-center style-pagination\">\n                  {/* <Pagination.First />\n                  <Pagination.Prev/> */}\n                  {items.splice(0,20)}                \n                  {items.splice(0,20)}\n                  {items.splice(0,20)}\n                  {/* <Pagination.Next/>\n                  <Pagination.Last/>                 */}\n                </Row>         \n                \n            </Pagination>\n             </Col>\n             </Row>\n           </div>\n\n <Row className=\"justify-content-md-center\" > {/*centrar */}\n  {/* for */}<CardColumns>\n  \n   {/**la sentencia del return tiene que estar al laodo paera que funcione */}\n   {/* para colocar una al lado de otra usa row y col  */}\n\n        {/* <h2>{this.state.idChar}</h2> */}\n        \n        {this.state.characterfind.length > 0 ? find : itemsCharacters[this.state.idChar]}\n        \n\n\n  \n      </CardColumns>\n  </Row>    \n        </Container>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\chars.js",[],"C:\\Users\\Silvano\\Desktop\\MisProyectos\\naruto_api\\src\\Search.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":64,"column":25,"nodeType":"40","messageId":"41","endLine":64,"endColumn":27},{"ruleId":"42","severity":1,"message":"43","line":83,"column":10,"nodeType":"44","messageId":"45","endLine":83,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":88,"column":10,"nodeType":"44","messageId":"45","endLine":88,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":93,"column":6,"nodeType":"49","messageId":"50","endLine":165,"endColumn":7},{"ruleId":"51","severity":1,"message":"52","line":93,"column":42,"nodeType":"53","messageId":"54","endLine":93,"endColumn":44},{"ruleId":"38","severity":1,"message":"39","line":112,"column":63,"nodeType":"40","messageId":"41","endLine":112,"endColumn":65},{"ruleId":"42","severity":1,"message":"55","line":119,"column":14,"nodeType":"44","messageId":"45","endLine":119,"endColumn":18},{"ruleId":"56","severity":1,"message":"57","line":177,"column":15,"nodeType":"58","endLine":177,"endColumn":104},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'limit2' is assigned a value but never used.","Identifier","unusedVar","'over2' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'over' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]